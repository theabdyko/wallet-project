version: '3.8'

services:
  db:
    image: postgres:15
    container_name: wallet-project-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-wallet_db}
      POSTGRES_USER: ${POSTGRES_USER:-wallet_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-wallet_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "${DOCKER_DB_PORT:-5432}:5432"
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-wallet_user} -d ${POSTGRES_DB:-wallet_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: develop
    command: ["/app/entrypoints/entrypoint.sh"]
    container_name: wallet-project-web
    volumes:
      - .:/app
    ports:
      - "${DOCKER_WEB_PORT:-8000}:8000"
    environment:
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-me-in-production}
      - DB_NAME=${POSTGRES_DB:-wallet_db}
      - DB_USER=${POSTGRES_USER:-wallet_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-wallet_password}
      - DB_HOST=${POSTGRES_HOST:-db}
      - DB_PORT=${POSTGRES_PORT:-5432}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
      - CORS_ALLOWED_CREDENTIALS=${CORS_ALLOWED_CREDENTIALS:-True}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-dev}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
